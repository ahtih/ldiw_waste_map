<?php
// $Id$

//!!! include auto nodetitle configuration & dependency, ideally as a Feature

/**
 * Implementation of hook_ctools_plugin_directory()
 */
function ldiw_waste_map_ctools_plugin_directory($module, $plugin) {
  if ($module == 'openlayers' && $plugin == 'style_plugin') {
    return 'plugins/style_plugin';
  }
}
  
/**
 * Implementation of hook_ctools_plugin_api()
 */
function ldiw_waste_map_ctools_plugin_api($module, $api) {
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_styles':
        return array('version' => 1);
      case 'openlayers_layers':
        return array('version' => 1);
      case 'openlayers_behaviors':
        return array('version' => 1);
    }
  }
  if ($module == "geoclustering_tree_params" &&
								$api == "geoclustering_tree_params") {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_geoclustering_tree_params()
 */

function ldiw_waste_map_geoclustering_tree_params()
{
	$tree_params=new stdClass();
	$tree_params->name='ldiw_waste_map';
	$tree_params->description='LDIW project Waste Map';
	$tree_params->maxlevel=27;
	$tree_params->api_version=1;
	$tree_params->geofield_name='field_coords';
	$tree_params->node_conditions=array('type' => 'waste_point',
										'status' => 1);
	$tree_params->summed_field_names=array(	'field_diameter',
											'field_nr_of_tires');
	return array($tree_params->name => $tree_params);
	}

/**
 * Implementation of hook_openlayers_styles()
 */
function ldiw_waste_map_openlayers_styles()
{
	$styles=array();

	$style=new stdClass();
	$style->api_version=1;
	$style->name='waste_point_style';
	$style->title=t('Waste point style');
	$style->description=$style->title;
	$style->data=array(
		'pointRadius' => '${ldiw_waste_map_point_style_plugin_plugins_getpointRadius}',
		'fillColor' => '${ldiw_waste_map_point_style_plugin_plugins_getfillColor}',
		'strokeColor' => '#800000',
		'strokeWidth' => '2',
		'strokeOpacity' => '0.4',
		'plugins' => array('plugin' => 'ldiw_waste_map_point_style_plugin'),
		);
	$styles[$style->name]=$style;

	$style=clone $style;
	$style->name='waste_point_highlight_style';
	$style->title=t('Waste point highlight style');
	$style->description=$style->title;
	$style->data['strokeWidth']='4';
	$style->data['strokeOpacity']='1';
	$styles[$style->name]=$style;

	return $styles;
	}

/**
 * Implementation of hook_openlayers_layer_types()
 */
function ldiw_waste_map_openlayers_layer_types() {
  return array(
    'ldiw_waste_map_layer_type_wfs' => array(
      'title' => t('WFS BBOX Vector layer'),
      'description' => t('A Vector map that uses WFS protocol to get features
									and uses OpenLayers BBOX Strategy.'),
      'layer_type' => array(
        'path' => drupal_get_path('module','ldiw_waste_map'),
        'file' => 'wfs_layer_type.inc',
        'class' => 'ldiw_waste_map_layer_type_wfs',
        'parent' => 'openlayers_layer_type',
      ),
    )
  );
}

/**
 * Implementation of hook_openlayers_behaviors()
 */
function ldiw_waste_map_openlayers_behaviors()
{
	return array(
		'ldiw_waste_map_behavior_addpointcontent' => array(
			'title' => t('Add/Edit Point Content'),
			'description' => t('Add/edit Drupal content nodes by clicking on map and filling in node form in popup.'),
			'type' => 'layer',
			'path' => drupal_get_path('module','ldiw_waste_map'),
			'file' => 'ldiw_waste_map_behavior_addpointcontent.inc',
			'behavior' => array(
				'class' => 'ldiw_waste_map_behavior_addpointcontent',
				'parent' => 'openlayers_behavior',
			),
		));
	}

/**
 * Implementation of hook_form_alter()
 */
function ldiw_waste_map_form_alter(&$form,$form_state,$form_id)
{
	if ($form_id == 'waste_point_node_form') {
		formfilter_filter_form($form,array(
				array('revision_information'),
				array('body_field','format'),
				array('author'),
				array('options'),
				array('comment_settings'),
				array('menu'),
				array('body_field','teaser_js'),
				array('body_field','teaser_include'),
				));

		$form['body_field']['body']['#type']='textfield';
		$form['body_field']['body']['#maxlength']='2000';
		}
	}
