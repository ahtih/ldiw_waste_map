<?php
// $Id$

DEFINE('LDIW_WASTE_MAP_DEFAULT_PHOTO_FIELDS',
									'field_photo field_external_photo');

/**
 * Implementation of hook_ctools_plugin_directory()
 */
function ldiw_waste_map_ctools_plugin_directory($module, $plugin) {
  if ($module == 'openlayers' && $plugin == 'style_plugin') {
    return 'plugins/style_plugin';
  }
}
  
/**
 * Implementation of hook_ctools_plugin_api()
 */
function ldiw_waste_map_ctools_plugin_api($module, $api) {
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_layers':
        return array('version' => 1);
      case 'openlayers_behaviors':
        return array('version' => 1);
    }
  }
  if ($module == "geoclustering_tree_params" &&
								$api == "geoclustering_tree_params") {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_geoclustering_tree_params()
 */

function ldiw_waste_map_geoclustering_tree_params()
{
	$tree_params=new stdClass();
	$tree_params->name='ldiw_waste_map';
	$tree_params->description='LDIW project Waste Map';
	$tree_params->maxlevel=27;
	$tree_params->api_version=1;
	$tree_params->geofield_name='field_coords';
	$tree_params->node_conditions=array('type' => 'waste_point',
										'status' => 1);
	$tree_params->summed_field_names=array(	'field_volume',
											'field_nr_of_tires',
											'field_composition_large',
											'field_composition_dangerous',
											'field_composition_biodegradable',
											'field_composition_construction',
											'field_composition_other');
	return array($tree_params->name => $tree_params);
	}

/**
 * Implementation of hook_openlayers_layer_types()
 */
function ldiw_waste_map_openlayers_layer_types() {
  return array(
    'ldiw_waste_map_layer_type_wfs' => array(
      'title' => t('WFS BBOX Vector layer'),
      'description' => t('A Vector map that uses WFS protocol to get features
									and uses OpenLayers BBOX Strategy.'),
      'layer_type' => array(
        'path' => drupal_get_path('module','ldiw_waste_map'),
        'file' => 'wfs_layer_type.inc',
        'class' => 'ldiw_waste_map_layer_type_wfs',
        'parent' => 'openlayers_layer_type',
      ),
    )
  );
}

/**
 * Implementation of hook_openlayers_behaviors()
 */
function ldiw_waste_map_openlayers_behaviors()
{
	return array(
		'ldiw_waste_map_behavior_addpointcontent' => array(
			'title' => t('Add/Edit Point Content'),
			'description' => t('Add/edit Drupal content nodes by ' .
					'clicking on map and filling in node form in popup.'),
			'type' => 'layer',
			'path' => drupal_get_path('module','ldiw_waste_map'),
			'file' => 'ldiw_waste_map_behavior_addpointcontent.inc',
			'behavior' => array(
				'class' => 'ldiw_waste_map_behavior_addpointcontent',
				'parent' => 'openlayers_behavior',
			),
		));
	}

/**
 * Implementation of hook_form_alter()
 */
function ldiw_waste_map_form_alter(&$form,$form_state,$form_id)
{
	if ($form_id == 'waste_point_node_form') {
		formfilter_filter_form($form,array(
				array('revision_information'),
				array('body_field','format'),
				array('author'),
				array('options'),
				array('comment_settings'),
				array('menu'),
				array('body_field','teaser_js'),
				array('body_field','teaser_include'),
				array('book'),
				array('attachments'),
				));

		//!!! hide external photos data

		$form['body_field']['body']['#type']='textfield';
		$form['body_field']['body']['#maxlength']=2000;
		$form['body_field']['body']['#size']=41;

		drupal_add_css(drupal_get_path('module','ldiw_waste_map') .
														'/node-form.css');

		foreach (array('field_volume','field_nr_of_tires','body_field')
																as $key) {
			$form[$key]['#prefix']='<span class="label-left-of-input">';
			$form[$key]['#suffix']='</span>';
			}

		$composition_weight=
				$form['#content_extra_fields']['body_field']['weight'] + 1;
		foreach ($form as $key => $element) {
			if (is_array($element) && isset($element['#weight']) &&
							$element['#weight'] >= $composition_weight) {
				$form[$key]['#weight']+=1;
				}
			}

		$form['composition']=array(
				'#type' => 'fieldset',
				'#title' => t('Composition percentages (in volume)'),
				'#weight' => $composition_weight,
				'#attributes' => array('class' => 'label-left-of-input-23em'),
				);

		$form['#attributes']['class'].=' vertically-condensed-form';

		foreach ($form as $key => $element) {
			if (strpos($key,'field_composition_') === 0) {
				$form['composition'][$key]=$element;
				unset($form[$key]);
				}
			}

		unset($form['book']['plid']);
		unset($form['book']['pick-book']);
		unset($form['attachments']['wrapper']['new']['attach']);
		unset($form['buttons']['preview']);
		}
	}

/**
 * Implementation of hook_menu()
 */

function ldiw_waste_map_menu()
{
	return array(
		file_directory_path() . '/ldiw_waste_map/waste_point_icon' => array(
			'file' =>
				'plugins/style_plugin/ldiw_waste_map_point_style_plugin.inc',
			'page callback' => 'ldiw_waste_map_waste_point_icon',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
			),
		'ldiw_waste_map/photos_ajax/%' => array(
			'page callback' => 'ldiw_waste_map_photos_ajax',
			'access callback' => TRUE,
			'page arguments' => array(2),
			'type' => MENU_CALLBACK,
			),
		'ldiw_waste_map/photo/%/%' => array(
			'page callback' => 'ldiw_waste_map_photo',
			'access callback' => TRUE,
			'page arguments' => array(2,3),
			'type' => MENU_CALLBACK,
			),

		// Admin page
		'admin/settings/ldiw_waste_map' => array(
			'title' => 'LDIW Waste Map',
			'description' => 'Configure the LDIW Waste Map.',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('ldiw_waste_map_admin_settings'),
			'access arguments' => array('administer site configuration'),
			),
		);
	}

/***************************************************************************/
/***************************                     ***************************/
/*************************** Admin settings page ***************************/
/***************************                     ***************************/
/***************************************************************************/

function ldiw_waste_map_admin_settings()
{
	$form=array(
		'ldiw_waste_map_photo_field_names' => array(
				'#type' => 'textfield',
				'#title' => t('Space-separated list of CCK Field names ' .
										'containing Waste Point photos'),
				'#default_value' => variable_get(
						'ldiw_waste_map_photo_field_names',
						LDIW_WASTE_MAP_DEFAULT_PHOTO_FIELDS),
				'#size' => 32,
				'#maxlength' => 1000,
				),
		);
	return system_settings_form($form);
	}

/***************************************************************************/
/**************                                               **************/
/************** Implementation of hook_openlayers_map_alter() **************/
/**************                                               **************/
/***************************************************************************/

function ldiw_waste_map_openlayers_map_alter(&$map)
{
	if (isset($map['behaviors']['ldiw_waste_map_behavior_addpointcontent'])) {
		drupal_add_css(drupal_get_path('module','ldiw_waste_map') .
														'/node-form.css');
		}
	}

/***************************************************************************/
/**********************                              ***********************/
/********************** ldiw_waste_map_list_photos() ***********************/
/**********************                              ***********************/
/***************************************************************************/

function ldiw_waste_map_list_photos(&$node)
{
	$fieldnames=explode(' ',variable_get(
						'ldiw_waste_map_photo_field_names',
						LDIW_WASTE_MAP_DEFAULT_PHOTO_FIELDS));
	$data=array();
	foreach ($fieldnames as $fieldname) {
		foreach ($node->{$fieldname} as $value) {
			$id=NULL;
			$serialized_data=array();
			if (!empty($value['fid'])) {
				$id=$value['fid'];
				}
			elseif (!empty($value['value'])) {
				$info=@unserialize($value['value']);
				if ($info && !empty($info['url'])) {
					$id=$value['value'];
					$serialized_data=$info;
					}
				}
			if (isset($id)) {
				$data[]=array(	base64_encode(substr(md5($id),0,3)),
								$value,
								$serialized_data);
				}
			}
		}

	return $data;
	}

/***************************************************************************/
/*************                                                 *************/
/************* ldiw_waste_map_compute_photos_id_width_height() *************/
/*************                                                 *************/
/***************************************************************************/

function ldiw_waste_map_compute_photos_id_width_height(&$node)
{
	$data=array();
	foreach (ldiw_waste_map_list_photos($node) as $photo) {
		list($id,$value,$serialized_data)=$photo;
		if (!empty($value['filepath'])) {
			$info=@getimagesize($value['filepath']);
			if ($info) {
				$serialized_data['width'] =$info[0];
				$serialized_data['height']=$info[1];
				}
			}

		$width =empty($serialized_data['width'] ) ? 0 :
												$serialized_data['width'];
		$height=empty($serialized_data['height']) ? 0 :
												$serialized_data['height'];
		$data[]="$id:$width:$height";
		}
	return implode(' ',$data);
	}

/***************************************************************************/
/**********************                              ***********************/
/********************** ldiw_waste_map_photos_ajax() ***********************/
/**********************                              ***********************/
/***************************************************************************/

function ldiw_waste_map_photos_ajax($node_id)
{
	$node=node_load($node_id);
	if (!$node) {
		drupal_not_found();
		return;
		}

	//!!! check node type

	$data=array();
	foreach (ldiw_waste_map_list_photos($node) as $photo) {
		list($id,$value,$serialized_data)=$photo;
		if (!empty($serialized_data)) {
			$data[$id]=$serialized_data;
			}
		}

	print json_encode($data);
	}

/***************************************************************************/
/*************************                        **************************/
/************************* ldiw_waste_map_photo() **************************/
/*************************                        **************************/
/***************************************************************************/

function ldiw_waste_map_photo($node_id,$photo_id)
{
	$node=node_load($node_id);
	if (!$node) {
		drupal_not_found();
		return;
		}

	//!!! check node type

	foreach (ldiw_waste_map_list_photos($node) as $photo) {
		list($id,$value,$serialized_data)=$photo;
		if ($id == $photo_id) {
			if (!empty($value['filepath'])) {
				file_download($value['filepath']);	// This does not return
				}
			if (!empty($serialized_data['url'])) {
				session_write_close();
				header('Location: ' . $serialized_data['url'],TRUE,302);
				exit();
				}
			}
		}

	drupal_not_found();
	}
