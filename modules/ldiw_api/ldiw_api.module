<?php
// $Id

//!!! Implement requirements check that Services is 3.x. version

/***************************************************************************/
/*******************************             *******************************/
/******************************* hook_menu() *******************************/
/*******************************             *******************************/
/***************************************************************************/

function ldiw_api_menu()
{
	return array(
		'get-api-base-url.json' => array(
			'file' => 'ldiw_api.inc',
			'page callback' => 'ldiw_api_get_api_base_url',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
			),
		);
	}

/***************************************************************************/
/**********************                               **********************/
/********************** ldiw_api_services_resources() **********************/
/**********************                               **********************/
/***************************************************************************/

function ldiw_api_services_resources()
{
	return array(
		'wp' => array(
			'create' => array(
				'callback' => '_ldiw_api_create',
				'file' => array('file' => 'inc','module' => 'ldiw_api'),
				'args' => array(
						array(
							'name' => 'lon',
							'optional' => FALSE,
							'source' => 'data',
							'type' => 'double',
							'description' => 'Longitude, in WGS84',
							),
						array(
							'name' => 'lat',
							'optional' => FALSE,
							'source' => 'data',
							'type' => 'double',
							'description' => 'Latitude, in WGS84',
							),
						array(
							'name' => 'client_id',
							'optional' => TRUE,
							'source' => 'data',
							'type' => 'string',
							'description' => 'Semi-unique ID of ' .
									'phone/computer of the user. Used for ' .
									'anti-abuse, e.g. blocking specific ' .
									'anonymous users',
							),
						//!!! Add more parameters
						),
				'access callback' => '_ldiw_api_access',
				'access arguments' => array('create'),
				'access arguments append' => TRUE,
				),

			'retrieve' => array(
				'callback' => '_ldiw_api_retrieve',
				'file' => array('file' => 'inc','module' => 'ldiw_api'),
				'args' => array(
						array(
							'name' => 'id',
							'optional' => FALSE,
							'source' => array('path' => 0),
							'type' => 'int',
							'description' => 'The id of Waste Point to get',
							),
						array(
							'name' => 'max_width',
							'optional' => TRUE,
							'default value' => 500,
							'source' => 'param',
							'type' => 'int',
							'description' => 'Maximum display width, in ' .
									'pixels. This is important for photos',
							),
						//!!! Add language_code parameter
						),
				'access callback' => '_ldiw_api_access',
				'access arguments' => array('view'),
				'access arguments append' => TRUE,
				),
			),
		);
	}

class LDIW_Plaintext_Formatter {
	function __construct($data) { $this->data=$data; }
	public function render() { return $this->data; }
	}

/***************************************************************************/
/**************                                              ***************/
/************** hook_rest_server_response_formatters_alter() ***************/
/**************                                              ***************/
/***************************************************************************/

function ldiw_api_rest_server_response_formatters_alter(&$formatters)
{
	$formatters['html']=array(
					'mime types' => array('text/html','text/plain'),
					'view' => 'LDIW_Plaintext_Formatter'
					);

	return $formatters;
	}

function _ldiw_api_access($op='view',$args=array()) {
	if ($op == 'view') {
		return TRUE;
		}
	$node='waste_point';
	if ($op != 'create' && !empty($args)) {
		$node=node_load($args[0]);
		}
	return node_access($op,$node);
	}
